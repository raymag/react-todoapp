{"version":3,"sources":["Todoapp.js","App.js","serviceWorker.js","index.js"],"names":["Todoapp","React","useState","items","setItems","text","setText","handleDelete","e","newItems","splice","target","value","ListItem","type","map","item","i","key","onClick","onSubmit","preventDefault","replace","length","placeholder","autoFocus","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAyCeA,G,MAtCC,WAAO,IAAD,EACQC,IAAMC,SAAS,IADvB,mBACXC,EADW,KACJC,EADI,OAEMH,IAAMC,SAAS,IAFrB,mBAEXG,EAFW,KAELC,EAFK,KAclB,SAASC,EAAaC,GAClB,IAAMC,EAAQ,YAAON,GACrBM,EAASC,OAAOF,EAAEG,OAAOC,MAAO,GAChCR,EAASK,GAGb,IAAMI,EAAW,SAAC,GAAD,IAAED,EAAF,EAAEA,MAAF,OAAa,8BAAOA,EAAP,MAE9B,OACI,6BACA,yCACA,wBAAIE,KAAK,QACHX,EAAMY,KAAK,SAACC,EAAMC,GAAP,OAAe,wBAAIC,IAAKD,GACT,kBAACJ,EAAD,CAAUD,MAAOI,IACjB,4BAAQJ,MAAOK,EAAGE,QAASZ,GAA3B,UAGhC,0BAAMa,SAvBV,SAAsBZ,GAClBA,EAAEa,iBACFhB,EAAKiB,QAAQ,MAAO,IAAIC,QAAUnB,EAAS,GAAD,mBAAKD,GAAL,CAAYE,KACtDC,EAAQ,MAqBR,2BAAOkB,YAAY,qBAAqBC,UAAU,OAAOb,MAAOP,EAAMqB,SA5B1E,SAAsBlB,GAClBF,EAAQE,EAAEG,OAAOC,UA2B8E,iCCzBxFe,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.446edb75.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Todoapp.css';\r\n\r\nconst Todoapp = () => {\r\n    const [items, setItems] = React.useState([]);\r\n    const [text, setText] = React.useState('');\r\n\r\n    function handleChange(e){\r\n        setText(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        text.replace(/\\s/g, '').length && setItems([...items, text]);\r\n        setText('');\r\n    }\r\n\r\n    function handleDelete(e){\r\n        const newItems = [...items]\r\n        newItems.splice(e.target.value, 1);\r\n        setItems(newItems);\r\n    }\r\n    \r\n    const ListItem = ({value}) => <span>{value} </span>\r\n\r\n    return (\r\n        <div>\r\n        <h1>Todo List</h1>\r\n        <ul type=\"None\">\r\n            { items.map( (item, i) => ( <li key={i}>\r\n                                        <ListItem value={item}/>\r\n                                        <button value={i} onClick={handleDelete}>X</button>\r\n                                        </li> ) ) }\r\n        </ul>\r\n        <form onSubmit={handleSubmit}>\r\n        <input placeholder=\"Insert an new item\" autoFocus=\"True\" value={text} onChange={handleChange}/><br/>\r\n        </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todoapp;","import React from 'react';\nimport './App.css';\nimport Todoapp from './Todoapp';\n\nfunction App() {\n  return (\n    <Todoapp/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}